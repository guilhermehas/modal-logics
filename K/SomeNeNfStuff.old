infixl 0 _/_⊢_/_
infixl 0 _/_⊩_/_

-- Definition of: (a) neutral terms
--                (b) values
--                (c) normal forms

form-pred : Set₁
form-pred = Cx modal -> Cx modal -> Ty modal -> Set

data Ne (Δ Γ : Cx modal) (T : form-pred) : (A : Ty modal) -> Set where

  DK-ne-var : ∀ {A}
                     -> (p : A ∈ Γ)
                 ------------------------
                     -> Ne Δ Γ T A

  DK-ne-app : ∀ {A B}

                  -> Ne Δ Γ T (A => B)   -> T Δ Γ A
                 --------------------------------------
                        -> Ne Δ Γ T B

  DK-ne-prod2 : ∀ {A B}

                 -> Ne Δ Γ T (A ∧ B)
                --------------------
                   -> Ne Δ Γ T A

  DK-ne-prod3 : ∀ {A B}

                 -> Ne Δ Γ T (A ∧ B)
                --------------------
                   -> Ne Δ Γ T B

  DK-ne-boxE : ∀ {A C}

                  -> Ne Δ Γ T (□ A)    -> T (Δ , A) Γ C
                -----------------------------------------
                             -> Ne Δ Γ T C
                             

mutual

  data Val (Δ Γ : Cx modal) : (A : Ty modal) -> Set where


    DK-val-ne : ∀ {A}

                    -> Ne Δ Γ Val A
                  --------------------
                    -> Val Δ Γ A


    DK-val-lam : ∀ {Η Θ A B}

                 ->  Δ / Γ ⊢ Η / Θ     -> Η / Θ , A ⊢ B  
                 --------------------------------------
                        -> Val Δ Γ (A => B)

    DK-val-prod1 : ∀ {Η Θ A B}

                  ->  Δ / Γ ⊢ Η / Θ    -> Η / Θ ⊢ A   -> Η / Θ ⊢ B
                 -------------------------------------------------
                                -> Val Δ Γ (A ∧ B)

    DK-val-boxI : ∀ {Η Θ A}

                   -> Δ / Γ ⊢ Η / Θ    -> · / Η ⊢  A
                 ------------------------------------
                          -> Val Δ Γ (□ A)



  data Nf (Δ Γ : Cx modal) : (A : Ty modal) -> Set where


    DK-nf-ne : ∀ {A}

                     -> Ne Δ Γ Nf A
                  ----------------------
                     -> Nf Δ Γ A


    DK-nf-lam : ∀ {A B}

                     -> Nf Δ (Γ , A) B
                 --------------------------
                     -> Nf Δ Γ (A => B)

    DK-nf-prod1 : ∀ {A B}

                  ->  Nf Δ Γ A   -> Nf Δ Γ B
                 -----------------------------
                     -> Nf Δ Γ (A ∧ B)

    DK-nf-boxI : ∀ {A}

                     -> Nf · Δ A
                 ---------------------
                     -> Nf Δ Γ (□ A)

  -- Substitutions of values.
  data _/_⊢_/_ :  Cx modal -> Cx modal -> Cx modal -> Cx modal -> Set where
    empty : ∀ {Δ Γ} -> Δ / Γ ⊢ · / ·
    right : ∀ {Δ Γ Η Θ A} -> (Δ / Γ ⊢ Η / Θ) -> Val Δ Γ A -> (Δ / Γ ⊢ Η / Θ , A)
    left : ∀ {Δ Γ Η Θ A} -> (Δ / Γ ⊢ Η / Θ) -> Val · Δ A -> (Δ / Γ ⊢ Η , A / Θ)

ne-weak-left : ∀ {Δ Γ A B } -> Ne Δ Γ Val A -> Ne (Δ , B) Γ Val A
ne-weak-right : ∀ {Δ Γ A B } -> Ne Δ Γ Val A -> Ne Δ  (Γ , B) Val A

ne-weak-many-left : ∀ {Δ Δ' Γ A} -> Ne Δ Γ Val A -> (Δ ⊆ Δ') -> Ne Δ' Γ Val A
ne-weak-many-right : ∀ {Δ Γ Γ' A} -> Ne Δ Γ Val A -> (Γ ⊆ Γ') -> Ne Δ Γ' Val A

ne-weak-many-left-nf : ∀ {Δ Δ' Γ A} -> Ne Δ Γ Nf A -> (Δ ⊆ Δ') -> Ne Δ' Γ Nf A
ne-weak-many-right-nf : ∀ {Δ Γ Γ' A} -> Ne Δ Γ Nf A -> (Γ ⊆ Γ') -> Ne Δ Γ' Nf A

val-weak-left : ∀ {Δ Γ A B} -> Val Δ Γ A -> Val (Δ , B) Γ A
val-weak-right : ∀ {Δ Γ A B} -> Val Δ Γ A -> Val Δ (Γ , B) A

val-weak-many-left : ∀ {Δ Δ' Γ A} -> Val Δ Γ A -> (Δ ⊆ Δ') -> Val Δ' Γ A
val-weak-many-right : ∀ {Δ Γ Γ' A} -> Val Δ Γ A -> (Γ ⊆ Γ') -> Val Δ Γ' A

nf-weak-many-left : ∀ {Δ Δ' Γ A} -> Nf Δ Γ A -> (Δ ⊆ Δ') -> Nf Δ' Γ A
nf-weak-many-right : ∀ {Δ Γ Γ' A} -> Nf Δ Γ A -> (Γ ⊆ Γ') -> Nf Δ Γ' A

ne-exch-left : ∀ {Δ Γ A B C} -> (Δ' : Cx modal) -> Ne (Δ , B , C ++ Δ') Γ Val A -> Ne (Δ , C , B ++ Δ') Γ Val A
ne-exch-right : ∀ {Δ Γ A B C} -> (Γ' : Cx modal) -> Ne Δ (Γ , B , C ++ Γ') Val A -> Ne Δ (Γ , C , B ++ Γ') Val A

val-exch-left : ∀ {Δ Γ A B C} -> (Δ' : Cx modal) -> Val (Δ , B , C ++ Δ') Γ A -> Val (Δ , C , B ++ Δ') Γ A
val-exch-right : ∀ {Δ Γ A B C} -> (Γ' : Cx modal) -> Val Δ (Γ , B , C ++ Γ') A -> Val Δ (Γ , C , B ++ Γ') A

id-ctxt : ∀ (Δ Γ : Cx modal) -> Δ / Γ ⊢ Δ / Γ

ctxt-weak-left : ∀ {Δ Γ Η Θ : Cx modal} {A : Ty modal} -> (Δ / Γ ⊢ Η / Θ) -> (Δ , A / Γ ⊢ Η / Θ)
ctxt-weak-right : ∀ {Δ Γ Η Θ : Cx modal} {A : Ty modal} -> (Δ / Γ ⊢ Η / Θ) -> (Δ / Γ , A ⊢ Η / Θ)

ctxt-weak-many-left : ∀ {Δ Δ' Γ Η Θ : Cx modal} -> (Δ / Γ ⊢ Η / Θ) -> (Δ ⊆ Δ') -> (Δ' / Γ ⊢ Η / Θ)
ctxt-weak-many-right : ∀ {Δ Γ Γ' Η Θ : Cx modal} -> (Δ / Γ ⊢ Η / Θ) -> (Γ ⊆ Γ') -> (Δ / Γ' ⊢ Η / Θ)

ctxt-exch-left : ∀ {Δ Γ Η Θ A B} -> (Δ' : Cx modal) -> (Δ , A , B ++ Δ' / Γ ⊢ Η / Θ) -> (Δ , B , A ++ Δ' / Γ ⊢ Η  / Θ)
ctxt-exch-right : ∀ {Δ Γ Η Θ A B} -> (Γ' : Cx modal) -> (Δ / Γ , A , B ++ Γ' ⊢ Η / Θ) -> (Δ / Γ , B , A ++ Γ' ⊢ Η  / Θ)

ctxt-insert-left : ∀ (Δ Γ Η Θ : Cx modal) {A : Ty modal} -> (Δ / Γ ⊢ Η / Θ) -> (Δ , A / Γ ⊢ Η , A / Θ)
ctxt-insert-right :  ∀ (Δ Γ Η Θ : Cx modal) {A : Ty modal} -> (Δ / Γ ⊢ Η / Θ) -> (Δ / Γ , A ⊢ Η / Θ , A)


ne-weak-left (DK-ne-var p) = DK-ne-var p
ne-weak-left (DK-ne-app p x) = DK-ne-app (ne-weak-left p) (val-weak-left x)
ne-weak-left (DK-ne-prod2 p) = DK-ne-prod2 (ne-weak-left p)
ne-weak-left (DK-ne-prod3 p) = DK-ne-prod3 (ne-weak-left p)
ne-weak-left (DK-ne-boxE p x) = DK-ne-boxE (ne-weak-left p) (val-exch-left · (val-weak-left x))

ne-weak-right (DK-ne-var p) = DK-ne-var (pop p)
ne-weak-right (DK-ne-app p x) =  DK-ne-app (ne-weak-right p) (val-weak-right x)
ne-weak-right (DK-ne-prod2 p) = DK-ne-prod2 (ne-weak-right p)
ne-weak-right (DK-ne-prod3 p) = DK-ne-prod3 (ne-weak-right p)
ne-weak-right (DK-ne-boxE p x) = DK-ne-boxE (ne-weak-right p) (val-weak-right x)

ne-weak-many-left (DK-ne-var p) q = DK-ne-var p
ne-weak-many-left (DK-ne-app t u) q = DK-ne-app (ne-weak-many-left t q) (val-weak-many-left u q)
ne-weak-many-left (DK-ne-prod2 t) q = DK-ne-prod2 (ne-weak-many-left t q)
ne-weak-many-left (DK-ne-prod3 t) q = DK-ne-prod3 (ne-weak-many-left t q)
ne-weak-many-left (DK-ne-boxE t u) q =
  DK-ne-boxE (ne-weak-many-left t q) (val-weak-many-left u (weakboth q))

ne-weak-many-right (DK-ne-var p) q = DK-ne-var (q p)
ne-weak-many-right (DK-ne-app t u) q = DK-ne-app (ne-weak-many-right t q) (val-weak-many-right u q)
ne-weak-many-right (DK-ne-prod2 t) q = DK-ne-prod2 (ne-weak-many-right t q)
ne-weak-many-right (DK-ne-prod3 t) q = DK-ne-prod3 (ne-weak-many-right t q)
ne-weak-many-right (DK-ne-boxE t u) q = DK-ne-boxE (ne-weak-many-right t q) (val-weak-many-right u q)

ne-weak-many-left-nf (DK-ne-var p) q = DK-ne-var p
ne-weak-many-left-nf (DK-ne-app t u) q = DK-ne-app (ne-weak-many-left-nf t q) (nf-weak-many-left u q)
ne-weak-many-left-nf (DK-ne-prod2 t) q = DK-ne-prod2 (ne-weak-many-left-nf t q)
ne-weak-many-left-nf (DK-ne-prod3 t) q = DK-ne-prod3 (ne-weak-many-left-nf t q)
ne-weak-many-left-nf (DK-ne-boxE t u) q =
  DK-ne-boxE (ne-weak-many-left-nf t q) (nf-weak-many-left u (weakboth q))

ne-weak-many-right-nf (DK-ne-var p) q = DK-ne-var (q p)
ne-weak-many-right-nf (DK-ne-app t u) q = DK-ne-app (ne-weak-many-right-nf t q) (nf-weak-many-right u q)
ne-weak-many-right-nf (DK-ne-prod2 t) q = DK-ne-prod2 (ne-weak-many-right-nf t q)
ne-weak-many-right-nf (DK-ne-prod3 t) q = DK-ne-prod3 (ne-weak-many-right-nf t q)
ne-weak-many-right-nf (DK-ne-boxE t u) q =
  DK-ne-boxE (ne-weak-many-right-nf t q) (nf-weak-many-right u q)

nf-weak-many-left (DK-nf-ne p) q = DK-nf-ne (ne-weak-many-left-nf p q)
nf-weak-many-left (DK-nf-lam t) q = DK-nf-lam (nf-weak-many-left t q)
nf-weak-many-left (DK-nf-prod1 t u) q = DK-nf-prod1 (nf-weak-many-left t q) (nf-weak-many-left u q)
nf-weak-many-left (DK-nf-boxI t) q = DK-nf-boxI (nf-weak-many-right t q)

nf-weak-many-right (DK-nf-ne p) q = DK-nf-ne (ne-weak-many-right-nf p q)
nf-weak-many-right (DK-nf-lam t) q = DK-nf-lam (nf-weak-many-right t (weakboth q))
nf-weak-many-right (DK-nf-prod1 t u) q = DK-nf-prod1 (nf-weak-many-right t q) (nf-weak-many-right u q)
nf-weak-many-right (DK-nf-boxI t) q = DK-nf-boxI t

ne-exch-left Δ' (DK-ne-var p) = DK-ne-var p
ne-exch-left Δ' (DK-ne-app t x) = DK-ne-app (ne-exch-left Δ' t) (val-exch-left Δ' x)
ne-exch-left Δ' (DK-ne-prod2 t) = DK-ne-prod2 (ne-exch-left Δ' t)
ne-exch-left Δ' (DK-ne-prod3 t) = DK-ne-prod3 (ne-exch-left Δ' t)
ne-exch-left Δ' (DK-ne-boxE t u) = DK-ne-boxE (ne-exch-left Δ' t) (val-exch-left (Δ' , _) u)

ne-exch-right Γ' (DK-ne-var p) = DK-ne-var (subsetdef p (cx-exch {Δ = Γ'}))
ne-exch-right Γ' (DK-ne-app t u) = DK-ne-app (ne-exch-right Γ' t) (val-exch-right Γ' u)
ne-exch-right Γ' (DK-ne-prod2 t) = DK-ne-prod2 (ne-exch-right Γ' t)
ne-exch-right Γ' (DK-ne-prod3 t) = DK-ne-prod3 (ne-exch-right Γ' t)
ne-exch-right Γ' (DK-ne-boxE t u) = DK-ne-boxE (ne-exch-right Γ' t) (val-exch-right Γ' u)

val-weak-left (DK-val-ne x) = DK-val-ne (ne-weak-left x)
val-weak-left (DK-val-lam E m) = DK-val-lam (ctxt-weak-left E) m
val-weak-left (DK-val-prod1 E a b) = DK-val-prod1 (ctxt-weak-left E) a b
val-weak-left (DK-val-boxI E m) = DK-val-boxI (ctxt-weak-left E) m

val-weak-many-left (DK-val-ne x) q = DK-val-ne (ne-weak-many-left x q)
val-weak-many-left (DK-val-lam E m) q = DK-val-lam (ctxt-weak-many-left E q) m
val-weak-many-left (DK-val-prod1 E t u) q = DK-val-prod1 (ctxt-weak-many-left E q) t u
val-weak-many-left (DK-val-boxI E m) q = DK-val-boxI (ctxt-weak-many-left E q) m

val-weak-many-right (DK-val-ne x) q = DK-val-ne (ne-weak-many-right x q)
val-weak-many-right (DK-val-lam E m) q = DK-val-lam (ctxt-weak-many-right E q) m
val-weak-many-right (DK-val-prod1 E t u) q = DK-val-prod1 (ctxt-weak-many-right E q) t u
val-weak-many-right (DK-val-boxI E m) q = DK-val-boxI (ctxt-weak-many-right E q) m

val-weak-right (DK-val-ne x) = DK-val-ne (ne-weak-right x)
val-weak-right (DK-val-lam E m) = DK-val-lam (ctxt-weak-right E) m
val-weak-right (DK-val-prod1 E a b) = DK-val-prod1 (ctxt-weak-right E) a b
val-weak-right (DK-val-boxI E m) = DK-val-boxI (ctxt-weak-right E) m

val-exch-left Δ' (DK-val-ne p) = DK-val-ne (ne-exch-left Δ' p)
val-exch-left Δ' (DK-val-lam E u) = DK-val-lam (ctxt-exch-left Δ' E) u
val-exch-left Δ' (DK-val-prod1 E t u) = DK-val-prod1 (ctxt-exch-left Δ' E) t u
val-exch-left Δ' (DK-val-boxI E t) = DK-val-boxI (ctxt-exch-left Δ' E) t

val-exch-right Γ' (DK-val-ne p) = DK-val-ne (ne-exch-right Γ' p)
val-exch-right Γ' (DK-val-lam E t) = DK-val-lam (ctxt-exch-right Γ' E) t
val-exch-right Γ' (DK-val-prod1 E t u) = DK-val-prod1 (ctxt-exch-right Γ' E) t u
val-exch-right Γ' (DK-val-boxI E t) = DK-val-boxI (ctxt-exch-right Γ' E) t

ctxt-weak-left empty = empty
ctxt-weak-left (right E x) = right (ctxt-weak-left E) (val-weak-left x)
ctxt-weak-left {Δ} {Γ} (left E x) = left (ctxt-weak-left E) (val-weak-right x)

ctxt-weak-right empty = empty
ctxt-weak-right (right E x) = right (ctxt-weak-right E) (val-weak-right x)
ctxt-weak-right (left E x) = left (ctxt-weak-right E)  x

ctxt-weak-many-left empty p = empty
ctxt-weak-many-left (right E x) p = right (ctxt-weak-many-left E p) (val-weak-many-left x p)
ctxt-weak-many-left (left E x) p = left (ctxt-weak-many-left E p) (val-weak-many-right x p)

ctxt-weak-many-right empty p = empty
ctxt-weak-many-right (right E x) p = right (ctxt-weak-many-right E p) (val-weak-many-right x p)
ctxt-weak-many-right (left E x) p = left (ctxt-weak-many-right E p) x

ctxt-exch-left Δ' empty = empty
ctxt-exch-left Δ' (right E x) = right (ctxt-exch-left Δ' E) (val-exch-left Δ' x)
ctxt-exch-left Δ' (left E x) = left (ctxt-exch-left Δ' E) (val-exch-right Δ' x)

ctxt-exch-right Γ' empty = empty
ctxt-exch-right Γ' (right E x) = right (ctxt-exch-right Γ' E) (val-exch-right Γ' x)
ctxt-exch-right Γ' (left E x) = left (ctxt-exch-right Γ' E) x

ctxt-insert-left Δ Γ Η Θ p = left (ctxt-weak-left p) (DK-val-ne (DK-ne-var top))

ctxt-insert-right Δ Γ Η Θ p = right (ctxt-weak-right p) (DK-val-ne (DK-ne-var top))

id-ctxt · · = empty
id-ctxt · (Γ , A) = ctxt-insert-right · Γ · Γ (id-ctxt · Γ)
id-ctxt (Δ , A) Γ = ctxt-insert-left Δ Γ Δ Γ (id-ctxt Δ Γ)

ctxt-to-modal-ctxt : ∀ {Δ Γ Η Θ : Cx modal} -> (Δ / Γ ⊢ Η / Θ) -> (· / Δ ⊢ · / Η)
ctxt-to-modal-ctxt empty = empty
ctxt-to-modal-ctxt (right p x) = ctxt-to-modal-ctxt p
ctxt-to-modal-ctxt (left p x) = right (ctxt-to-modal-ctxt p) x

 
-- Inserting values and value contexts into terms and term contexts.

data _/_⊩_/_ :  Cx modal -> Cx modal -> Cx modal -> Cx modal -> Set where
  empty : ∀ {Δ Γ} -> Δ / Γ ⊩ · / ·
  right : ∀ {Δ Γ Η Θ A} -> (Δ / Γ ⊩ Η / Θ) -> (Δ / Γ ⊢ A) -> (Δ / Γ ⊩ Η / Θ , A)
  left : ∀ {Δ Γ Η Θ A} -> (Δ / Γ ⊩ Η / Θ) -> (· / Δ ⊢ A) -> (Δ / Γ ⊩ Η , A / Θ)

get-right-term : ∀ {Δ Γ Η Θ A} -> (A ∈ Θ) -> (Δ / Γ ⊩ Η / Θ) -> (Δ / Γ ⊢ A)
get-right-term () empty
get-right-term top (right p x) = x
get-right-term (pop q) (right p x) = get-right-term q p
get-right-term q (left p x) = get-right-term q p

insert-val : ∀ {Δ Γ A} -> Val Δ Γ A -> Δ / Γ ⊢ A
insert-ne-val : ∀ {Δ Γ A} -> Ne Δ Γ Val A -> Δ / Γ ⊢ A
ctxt-val-to-term :  ∀ {Δ Γ Η Θ} -> Δ / Γ ⊢ Η / Θ -> Δ / Γ ⊩ Η / Θ
subst-ctxt : ∀ {Δ Γ Η Θ A} -> Δ / Γ ⊢ Η / Θ -> Η / Θ ⊢ A ->  Δ / Γ ⊢ A
subst-ctxt-modal : ∀ {Δ Γ Η Θ A} -> Δ / Γ ⊢ Η / Θ -> (· / Η ⊢ A) ->  (· / Δ ⊢ A)

insert-val (DK-val-ne x) = insert-ne-val x
insert-val (DK-val-lam E x) = DK-lam (subst-ctxt (ctxt-insert-right _ _ _ _ E) x)
insert-val (DK-val-prod1 E x y) = DK-prod1 {!!} {!!} -- (subst-ctxt E x) (subst-ctxt E y)
insert-val (DK-val-boxI E x) = DK-boxI (subst-ctxt-modal E x)

insert-ne-val (DK-ne-var p) = DK-var p
insert-ne-val (DK-ne-app t x) = DK-app (insert-ne-val t) (insert-val x)
insert-ne-val (DK-ne-prod2 t) = DK-prod2 (insert-ne-val t)
insert-ne-val (DK-ne-prod3 t) = DK-prod3 (insert-ne-val t)
insert-ne-val (DK-ne-boxE t x) =  DK-boxE (insert-ne-val t) (insert-val x)

ctxt-val-to-term empty = empty
ctxt-val-to-term (right E x) = right (ctxt-val-to-term E) (insert-val x)
ctxt-val-to-term (left E x) = left (ctxt-val-to-term E) (insert-val x)

subst-ctxt E (DK-var x) = {!!} -- get-right-term x (ctxt-val-to-term E)
subst-ctxt E (DK-app t u) = DK-app (subst-ctxt E t) (subst-ctxt E u)
subst-ctxt E (DK-lam t) = DK-lam (subst-ctxt (ctxt-insert-right _ _ _ _ E) t)
subst-ctxt E (DK-prod1 t u) = DK-prod1 (subst-ctxt E t) (subst-ctxt E u)
subst-ctxt E (DK-prod2 t) = DK-prod2 (subst-ctxt E t)
subst-ctxt E (DK-prod3 t) = DK-prod3 (subst-ctxt E t)
subst-ctxt E (DK-boxI t) = DK-boxI (subst-ctxt-modal E t)
subst-ctxt E (DK-boxE t u) = DK-boxE (subst-ctxt E t) (subst-ctxt (ctxt-insert-left _ _ _ _ E) u)


subst-ctxt-modal E t = {!!}
